<?php

$str = '-';

/*$stringLength = new \Zend\Validator\StringLength(['min' => 2, 'max' => 10]);
$stringLength->setMessages([
    \Zend\Validator\StringLength::TOO_SHORT => 'Too short',
    \Zend\Validator\StringLength::TOO_LONG  => 'Too long',
]);

$alpha = new \Zend\I18n\Validator\Alpha();
$alpha->setMessages([
    \Zend\I18n\Validator\Alpha::NOT_ALPHA => 'Not alpha',
]);

//$alpha->setMessage('Not alpha', \Zend\I18n\Validator\Alpha::NOT_ALPHA);


$validatorChain = new \Zend\Validator\ValidatorChain();
$validatorChain->attach($stringLength);
$validatorChain->attach($alpha);
*/

/*$validatorChain = new \Zend\Validator\ValidatorChain();
$validatorChain->attachByName('StringLength', ['min' => 2, 'max' => 10]);
$validatorChain->attachByName('Alpha');


if ($validatorChain->isValid($str)) {
    echo 'Good';
} else {
    foreach ($validatorChain->getMessages() as $message) {
        echo "<div>{$message}</div>";
    }
}*/

/*$value = 10.0;

$floatValidator = new \Tutorial\Validator\FloatValidator();

if ($floatValidator->isValid($value)) {
    echo 'Yes';
} else {
    foreach ($floatValidator->getMessages() as $message) {
        echo "<div>{$message}</div>";
    }
}*/

?>

<?php
/*use Zend\I18n\Translator\Translator;
$translator = new Translator();

$type = 'phparray';
$file = 'ru_RU.php';

$path = getcwd() . '/data/translator/' . $file;

if (is_file($path)) {
    $translator->addTranslationFile($type, $path);
    echo $translator->translate('home');
}*/
?>

<?php


use Zend\Crypt\Password\Bcrypt;

/*$bcrypt = new Bcrypt();
$securePass = $bcrypt->create('user password');

//echo $securePass;

$bcrypt = new Bcrypt();
//$securePass = 'the stored bcrypt value';
$password = 'user password1';

if ($bcrypt->verify($password, $securePass)) {
    echo "The password is correct! \n";
} else {
    echo "The password is NOT correct.\n";
}*/


?>


<?php



use Zend\Crypt\BlockCipher;

$cipher = BlockCipher::factory('mcrypt', array('algorithm' => 'blowfish'));
$cipher->setKey('this is the encryption key');
$text      = 'This is the message to encrypt';
$encrypted = $cipher->encrypt($text);

printf("Encrypted text: %sn", $encrypted);


echo '<hr>';




$cipher = BlockCipher::factory('mcrypt', array('algorithm' => 'blowfish'));
$cipher->setKey('this is the encryption key');
$encrypted  = $cipher->decrypt($encrypted);

printf("Decrypted text: %sn", $encrypted);
?>



<?php

echo '<hr>';

$pathToLogFile = getcwd() . '/data/log/log.txt';

if (is_file($pathToLogFile)) {
    $writer = new Zend\Log\Writer\Stream($pathToLogFile);
    $logger = new Zend\Log\Logger();
    $logger->addWriter($writer);

    try {
        $a = rand(0, 10);
        $b = rand(0, 1);

        if ($b == 0) {
            throw new \Exception('Cannot divide to zero');
        }

        echo $a . ' / ' . $b . ' = ' . $a / $b;
    } catch (\Exception $e) {
        $errorMessage = "\n\t";
        $errorMessage .= 'File: ' . $e->getFile() . "\n\t";
        $errorMessage .= 'Line: ' . $e->getLine() . "\n\t";
        $errorMessage .= 'Message: ' . $e->getMessage();

        $logger->info($errorMessage);
    }
}




?>

<?php
echo '<hr>';
echo '<hr>';
echo '<hr>';

$filter = new \Zend\Filter\Encrypt();
$filter->setKey('imeetvseprava'); //
$filter->setVector('36452049153098394715');
$content = $filter->filter('message');
printf("%s\n", $content);








// use the default adapter that is BlockCipher
$filter = new Zend\Filter\Decrypt();
$filter->setKey('imeetvseprava');
printf("Decrypt: %s\n", $filter->filter($content));




?>









<?php
$headTitle = 'Example';
$this->headTitle($headTitle);
?>
<div class="row">
    <div class="col-sm-12">
        <h3><?= $headTitle ?></h3>
    </div>
</div>
<p><?= $this->escapeHtml($this->url) ?></p>
<p><?= $this->widget ?></p>
<?= $this->getTime() ?>



